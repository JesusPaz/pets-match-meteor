{"version":3,"sources":["meteor://ðŸ’»app/server/main.js"],"names":["Meteor","module","link","v","WebApp","express","default","read","store","require","app","bodyParser","MongoClient","ObjectID","db","MongoURI","connect","useUnifiedTopology","useNewUrlParser","err","database","connectHandlers","use","urlencoded","extended","json","post","req","res","user","body","password","users","collection","find","toArray","result","console","log","length","status","message","email","newUser","likePets","dislikePets","usersMatch","insertOne","get","params","username","pets","$ne","isPetCorrect","timesToFind","some","nextPet","indexOf","_id","toString","id","image","name","age","gender","breed","isSterialized","isReproduced","city","country","owner","idPet","idpet","updateOne","$addToSet","$each","userSend","usersend","userRcv","userrcv","isMatch","count","findPet","nextId","petOwner","findOne","userparam","resta","send","push","petsTotal","nextUser","matches","i","result1","pet","response","userParam","deleteOne","userA","participantA","userB","participantB","chats","actChat","$or","$and","messages","newChat","msg"],"mappings":"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","file":"/app.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\nimport { WebApp } from 'meteor/webapp';\nimport express from 'express';\nimport { read } from 'fs';\n\nvar store = require('store')\nconst app = express();\nconst bodyParser = require('body-parser');\nvar MongoClient = require('mongodb').MongoClient;\nvar ObjectID = require('mongodb').ObjectID;\nvar db;\nconst MongoURI = \"mongodb+srv://admin:admin@cluster0-n5sgi.mongodb.net/pets-match?retryWrites=true&w=majority\";\n\nMongoClient.connect(MongoURI, { useUnifiedTopology: true, useNewUrlParser: true, },\n  function (err, database) {\n    if (err) throw err;\n\n    db = database.db(\"pets-match\");\n    WebApp.connectHandlers.use(app);\n  });\n\napp.use(\n  bodyParser.urlencoded({\n    extended: true\n  })\n)\napp.use(bodyParser.json())\n\n// Method to login in the server. in the body rcv the user and password\napp.post('/api/login', (req, res) => {\n\n  const user = req.body.user\n  const password = req.body.password\n\n  const users = db.collection(\"users\");\n\n  users.find({ \"user\": user }).toArray(function (err, result) {\n    if (err) {\n      console.log(err)\n    } else {\n      if (result.length == 1) {\n        if (result[0].password == password) {\n          res.status(200).json({ message: 'User data is OK' });\n        } else {\n          res.status(401).json({ message: 'User or password do not match' });\n        }\n      } else {\n        res.status(401).json({ message: 'User do not exists' });\n      }\n    }\n  });\n});\n\n\n// Method to sing up in the server. in the body rcv the user and password\napp.post('/api/singup', (req, res) => {\n\n  const user = req.body.user\n  const password = req.body.password\n  const email = req.body.email\n\n  const users = db.collection(\"users\");\n\n  users.find({ \"user\": user }).toArray(function (err, result) {\n    if (err) {\n      console.log(err)\n    } else {\n      if (result.length == 0) {\n\n        var newUser = {\n          \"user\": user, \"password\": password, \"email\": email, likePets: [],\n          dislikePets: [], usersMatch: []\n        };\n\n        users.insertOne(newUser, function (err, res) {\n          if (err) throw err;\n        });\n\n        res.status(200).json({ message: 'User added successfully' });\n      } else {\n        res.status(401).json({ message: 'User already exists' });\n      }\n    }\n  });\n});\n\n\n// Method to get the next dog\napp.get('/api/pets/next/:username', (req, res) => {\n\n  const user = req.params.username\n\n  const users = db.collection(\"users\");\n  const pets = db.collection(\"pets\");\n\n  users.find({ \"user\": user }).toArray(function (err, result) {\n    if (err) {\n      console.log(err)\n    } else {\n      if (result.length == 1 && user) {\n        var likePets = result[0].likePets;\n        var dislikePets = result[0].dislikePets\n\n        pets.find({ \"owner\": { $ne: user } }).toArray(function (err, result) {\n          if (err) {\n            console.log(err)\n          } else {\n            var isPetCorrect = false\n            var timesToFind = 0\n            result.some(function (nextPet) {\n              timesToFind++\n              if (likePets.indexOf(nextPet._id.toString()) === -1 && dislikePets.indexOf(nextPet._id.toString()) === -1) {\n                res.status(200).json({\n                  id: nextPet._id,\n                  image: nextPet.image,\n                  name: nextPet.name,\n                  age: nextPet.age,\n                  gender: nextPet.gender,\n                  breed: nextPet.breed,\n                  isSterialized: nextPet.isSterialized,\n                  isReproduced: nextPet.isReproduced,\n                  city: nextPet.city,\n                  country: nextPet.country,\n                  owner: nextPet.owner\n                });\n                isPetCorrect = true\n              }\n              return isPetCorrect\n            });\n            if (!isPetCorrect) {\n              res.status(401).json({ message: 'You do not have more pets to see, try it later!' });\n            }\n          }\n        });\n\n      } else {\n        res.status(401).json({ message: 'User do not exists' });\n      }\n    }\n  });\n});\n\n\n// Method give a like to the actual dog\napp.post('/api/pets/like/:username/:idpet', (req, res) => {\n\n  const user = req.params.username\n  const idPet = req.params.idpet\n  const users = db.collection(\"users\");\n\n  users.find({ \"user\": user }).toArray(function (err, result) {\n    if (err) {\n      console.log(err)\n    } else {\n      if (result.length == 1 && user && idPet) {\n\n        users.updateOne(\n          { \"user\": user },\n          { $addToSet: { likePets: { $each: [idPet] } } }\n        )\n\n        res.status(200).json({ message: 'Like successfully' });\n      } else {\n        res.status(401).json({ message: 'Parameters are incorrect' });\n      }\n    }\n  });\n});\n\n\n// Method give a dislike to the actual dog\napp.post('/api/pets/dislike/:username/:idpet', (req, res) => {\n\n  const user = req.params.username\n  const idPet = req.params.idpet\n  const users = db.collection(\"users\");\n\n  users.find({ \"user\": user }).toArray(function (err, result) {\n    if (err) {\n      console.log(err)\n    } else {\n      if (result.length == 1 && user && idPet) {\n\n        users.updateOne(\n          { \"user\": user },\n          { $addToSet: { dislikePets: { $each: [idPet] } } }\n        )\n\n        res.status(200).json({ message: 'Disike successfully' });\n      } else {\n        res.status(401).json({ message: 'Parameters are incorrect' });\n      }\n    }\n  });\n});\n\n\n\n// Method search if the user given also like your pet (If it's a match)\n// user send: user that send a like\n// user rcv: user that recv a like\napp.get('/api/pets/match/:usersend/:userrcv', (req, res) => {\n\n  const userSend = req.params.usersend\n  const userRcv = req.params.userrcv\n\n  const users = db.collection(\"users\");\n  const pets = db.collection(\"pets\");\n\n  users.find({ \"user\": userRcv }).toArray(function (err, result) {\n    if (err) {\n      console.log(err)\n    } else {\n      if (result.length == 1 && userSend && userRcv) {\n        var likePets = result[0].likePets;\n        var isMatch = false\n        var count = 0\n        var findPet = likePets.some(async function (nextId) {\n          let petOwner = await pets.findOne({ \"_id\": new ObjectID(nextId) })\n          if (petOwner.owner == userSend) {\n            isMatch = true\n            res.status(200).json({ message: \"It's a match\" });\n            \n            users.updateOne(\n              { \"user\": userRcv },\n              { $addToSet: { usersMatch: { $each: [userSend] } } }\n            )\n\n            users.updateOne(\n              { \"user\": userSend },\n              { $addToSet: { usersMatch: { $each: [userRcv] } } }\n            )\n          }\n\n          count++\n          return petOwner.owner == userSend\n        });\n        if (!findPet) {\n          res.status(200).json({ message: \"It's not a match\" });\n        }\n      } else {\n        res.status(401).json({ message: 'Parameters are incorrect' });\n        console.log(\"Bad data\")\n      }\n    }\n  });\n\n});\n\n\n\n// Method for get the pets that a user have register\n// user: user that need to show his pets\napp.get('/api/mypets/:user', (req, res) => {\n\n  const userparam = req.params.user\n  const pets = db.collection(\"pets\");\n\n  resta = [];\n\n  pets.find({ \"owner\": userparam }).toArray(function (err, result) {\n    if (err) {\n      res.status(500).send(err);\n    } else {\n      result.some(function (nextPet) {\n        resta.push(nextPet);\n      });\n\n    }\n    res.send(resta);\n  });\n\n});\n\n\n// Method for get the pets that a user have register\n// user: user that need to show his pets\napp.get('/api/mylovers/:user', (req, res) => {\n\n  const userparam = req.params.user\n\n  const pets = [];\n\n  const users = db.collection(\"users\");\n  const petsTotal = db.collection(\"pets\");\n\n  users.find({ \"user\": userparam }).toArray(function (err, result) {\n    if (err) {\n      res.status(500).send(err);\n    } else {\n      result.some(function (nextUser) {\n        var matches = nextUser.usersMatch;\n        for (let i = 0; i < matches.length; i++) {\n          petsTotal.find({ \"owner\": matches[i] }).toArray(function (err, result1) {\n            if (err) {\n              res.status(500).send(err);\n            } else {\n              result1.some(function (nextPet) {\n                pets.push(nextPet);\n              });\n            }\n            res.send(pets);\n          });\n        }\n      });\n\n    }\n\n  });\n});\n\n\n\n// Method to sing up in the server. in the body rcv the user and password\napp.post('/api/addpet', (req, res) => {\n\n  const pet = req.body.pet\n\n  const pets = db.collection(\"pets\");\n\n  pets.insertOne(pet, function (err, response) {\n    if (err) {\n      res.send(err);\n    } else {\n      res.status(200).send(response);\n    }\n  });\n\n\n\n});\n\n\napp.post('/api/delete/:_id', (req, res) => {\n\n  const userParam = req.params._id;\n  const pets = db.collection(\"pets\");\n\n  pets.deleteOne({ \"_id\": ObjectID(userParam) }, (err, result) => {\n    if (err) {\n      res.send(err);\n    } else {\n      res.status(200);\n    }\n  });\n\n  res.status(200);\n\n});\n\n//load or create new chat if does not exist a previos chat conversation\napp.post('/api/chat/:participantA/:participantB', async (req, res) => {\n  const userA = req.params.participantA;\n  const userB = req.params.participantB;\n  const chats = db.collection(\"chats\");\n\n  let actChat = await chats.findOne({\n    $or: [\n      { $and: [{ participantA: userA }, { participantB: userB }] },\n      { $and: [{ participantA: userB }, { participantB: userA }] }\n    ]\n  });\n  // if the chat exists\n  if (actChat != null) {\n    res.status(200).send(actChat.messages);\n  } else {\n\n    var newChat = {\n      \"participantA\": userA, \"participantB\": userB,\n      messages: []\n    };\n\n    chats.insertOne(newChat, function (err, res) {\n      if (err) throw err;\n    });\n\n    var messages = [];\n    res.status(200).send(messages);\n  }\n});\n\n// Add a new message to the conversation\napp.post('/api/chat/addmsg/:participantA/:participantB/:msg', async (req, res) => {\n\n  const userA = req.params.participantA;\n  const userB = req.params.participantB;\n  const msg = req.params.msg;\n  const chats = db.collection(\"chats\");\n\n  let actChat = await chats.findOne({\n    $or: [\n      { $and: [{ participantA: userA }, { participantB: userB }] },\n      { $and: [{ participantA: userB }, { participantB: userA }] }\n    ]\n  });\n  // if the chat exists\n  if (actChat != null) {\n\n    chats.updateOne(\n      {\n        $or: [\n          { $and: [{ participantA: userA }, { participantB: userB }] },\n          { $and: [{ participantA: userB }, { participantB: userA }] }\n        ]\n      },\n      { $addToSet: { messages: { $each: [msg] } } }\n    )\n\n    let actChat = await chats.findOne({\n      $or: [\n        { $and: [{ participantA: userA }, { participantB: userB }] },\n        { $and: [{ participantA: userB }, { participantB: userA }] }\n      ]\n    });\n\n    res.status(200).send(actChat.messages);\n\n\n  } else {\n    res.status(500).send(\"The chat do not exists\");\n  }\n});\n\n\n"]}